import org.apache.tools.ant.taskdefs.condition.Os

class ClosureScript extends groovy.lang.Script {
    Closure closure
    def run() {
        closure.resolveStrategy = Closure.DELEGATE_FIRST
        closure.delegate = this
        closure.call()
    }
}

ext.app_name =  findProperty("app_name") ?: name
project.buildDir = findProperty('altBuildDir') ?: "${buildRoot}/${app_name}"            // allow for an alternate build directory

task clean {
    delete buildDir

}

task generatePdf (type: Exec) {
    description= 'Generate PDF'

    executable "htmldoc"

    doFirst {

        try {
            "$executable --version".execute()
        } catch (Exception e) {
            println ">> HTMLDoc is not installed.  Skipping pdf generation."
            throw new StopExecutionException(">> HTMLDoc is not installed.  Skipping pdf generation.")
        }
        workingDir = buildDir

        def pdfFile = 'help.pdf'
        String inputs = new File("$buildDir/.pdf-input").text.trim()
        args "--compression=9", "--left", ".7in", "--right", ".7in", "--linkcolor", "blue", "--webpage", "-f", "$buildDir/$pdfFile", "--titleimage"
        args inputs.split()

        println ">> generatePdf: $commandLine"
    }
}


task loadConfig {
    doLast {
        project.ext.appProps = new Properties()
        appProps.putAll(project.ext.properties)
        appProps.putAll(System.getenv())

        if (project.hasProperty("appConfig")) {
            def env = findProperty("env") ? project.env : "local"
            def source = appConfig instanceof File ? appConfig.toURL() : new ClosureScript(closure: appConfig)
            appProps.putAll( new ConfigSlurper(env).parse(source).toProperties() )
        }

        // generate version tag
        def major = appProps.get('BuildMajor', '1')
        def minor = appProps.get('BuildMinor', '0')
        def rev = appProps.get('BuildRev', '0')

        appProps.put('REACT_APP_app_name', findProperty('REACT_APP_app_name') ?: app_name)

        appProps.put('REACT_APP_VersionTag', "${app_name}_$major.$minor.${rev}")
        appProps.put('REACT_APP_BuildCommit', getCommitHash(rootDir))

        appProps.put('REACT_APP_BuildTime', new Date().toString())
        appProps.put('REACT_APP_BuildDate',new Date().format("yyyy-MM-dd"))
    }
}

task copyHtml(type: Copy, dependsOn: loadConfig) {
    from "${rootDir}/html"
    include "*.*"
    include "${app_name}/**"
    into buildDir
}

task zipHelp(type: Zip) {
    archiveBaseName = "${app_name}_help"
    destinationDirectory = file("$buildRoot/dist")
    from("$buildDir") {
        exclude "war"
    }
    into app_name
}

task dockerCopySrc(type: Copy) {
    from "/src"
    exclude "**/node_modules", ".git*", "build", ".gradle"
    into rootDir
}

task dockerCopyArtifacts(type: Copy) {
    from buildRoot
    into "/src/build"
}

task buildPdfInput(type:Exec) {
    workingDir = appRoot
    commandLine "npx -p @babel/core -p @babel/node babel-node --presets @babel/preset-env ./src/builder.js ${app_name} ${buildDir}".split(" ")
    doFirst {
        for (String key : appProps.keySet()) {
            if (key.startsWith('REACT_APP_')) {
                environment (key, appProps[key])
            }
        }
    }
}

task buildClient(dependsOn: loadConfig) {

    doLast {

        InitNode(appRoot);

        def res = exec {
            workingDir appRoot
            commandLine 'yarn', 'build'
            environment ('BUILD_DIR', buildDir)
            for (String key : appProps.keySet()) {
                if (key.startsWith('REACT_APP_')) {
                    environment (key, appProps[key])
                }
            }
        }
        if (res.getExitValue() != 0) {
            throw new GradleException("buildJs failed")
        }
        mkdir buildRoot
        "mv ${appRoot}/build ${buildDir}".execute()
    }
}


task build(dependsOn: [loadConfig, buildClient, buildPdfInput, copyHtml, generatePdf])
task buildWithZip(dependsOn: [loadConfig, buildClient, buildPdfInput, copyHtml, generatePdf, zipHelp])

task run(dependsOn: build) {
    doLast {

        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            "cmd /c start ${buildDir}/index.html".execute()
        } else {
            "open ${buildDir}/index.html".execute()
        }
    }
}

task install(dependsOn: build) {
    description= 'Install help to a web server.  Requires property or environment install_dir to be set.'

    doFirst {
        def installDir = appProps.get("install_dir")
        if (installDir == null && appProps.containsKey('CM_BASE_APP_DIR')) {
            installDir = appProps.get('CM_BASE_APP_DIR') + '/web/html/onlinehelp'      // IRSA's specific
        }
        if (installDir == null) {
            throw ProjectConfigurationException("install_dir is not set.  install aborted.")
        }
        def outdir = file(installDir);
        if (!outdir.exists()) {
            throw ProjectConfigurationException("${outdir.getPath()} not found.  install aborted.")
        }
        def zips = fileTree(dir: "${buildRoot}/dist", include: '*.zip')
        zips.each { File zipFile ->
            copy {
                from zipTree(zipFile)
                into outdir
            }
        }
    }
}


ext.InitNode = { workDir ->
    try {
        "yarn version".execute()
    } catch (Exception e) {
        println ">> Task failed due to missing yarn package manager which comes bundled with node.js"
        throw new GradleException("Task failed due to missing yarn package manager which comes bundled with node.js", e)
    }

    if (file("${workDir}/package.json").exists()) {
        exec {
            workingDir = workDir
            executable "yarn"
            args "install", "--ignore-platform", "--frozen-lockfile"
        }
    }
}


ext.getCommitHash = { workDir="." ->
    try {
        def hashOut = new ByteArrayOutputStream()
        exec {
            commandLine "git", "rev-parse", "--short", "HEAD"
            workingDir = workDir
            standardOutput = hashOut
        }
        return hashOut.toString().trim();
    } catch (Exception e) {
        return 'n/a'
    }
}

task dockerBuild {
    dependsOn 'dockerCopySrc'
    dependsOn 'build'
    dependsOn 'dockerCopyArtifacts'
}

//-------------------------
// define task order
//-------------------------
zipHelp.mustRunAfter       generatePdf
generatePdf.mustRunAfter   copyHtml
copyHtml.mustRunAfter      buildPdfInput
buildPdfInput.mustRunAfter buildClient

build.mustRunAfter                  dockerCopySrc
dockerCopyArtifacts.mustRunAfter    build